import InstanaInfrastructureDataSource from './datasource_infrastructure';
import InstanaApplicationDataSource from './datasource_application';
import InstanaEndpointDataSource from "./datasource_endpoint";
import InstanaServiceDataSource from "./datasource_service";
import InstanaWebsiteDataSource from './datasource_website';
import AbstractDatasource from './datasource_abstract';
import InstanaSLODataSource from './datasource_slo';
import TimeFilter from './types/time_filter';
import Cache from './cache';
import Selectable from "./types/selectable";
export default class InstanaDatasource extends AbstractDatasource {
    infrastructure: InstanaInfrastructureDataSource;
    application: InstanaApplicationDataSource;
    website: InstanaWebsiteDataSource;
    service: InstanaServiceDataSource;
    endpoint: InstanaEndpointDataSource;
    slo: InstanaSLODataSource;
    availableGranularities: Array<Selectable>;
    availableRollups: Array<Selectable>;
    maxWindowSizeInfrastructure: number;
    maxWindowSizeAnalyzeWebsites: number;
    maxWindowSizeAnalyzeApplications: number;
    maxWindowSizeAnalyzeMetrics: number;
    resultCache: Cache<any>;
    sloIsEnabled: boolean;
    /** @ngInject */
    constructor(instanceSettings: any, backendSrv: any, templateSrv: any, $q: any);
    query(options: any): any;
    appendResult(data: any, target: any): any;
    adjustTimeFilterIfCached(timeFilter: TimeFilter, target: any): TimeFilter;
    getDeltaRequestTimestamp(series: any, fromDefault: number): number;
    buildTargetWithAppendedDataResult(target: any, timeFilter: TimeFilter, data: any): {
        target: any;
        data: any;
    };
    cacheResultIfNecessary(result: any, target: any): void;
    hasResult(result: any): boolean;
    removeEmptyTargetsFromResultData(data: any): any;
    applyTimeShiftIfNecessary(data: any, target: any): void;
    aggregateDataIfNecessary(data: any, target: any): any;
    groupTargetsByRefId(data: any): any;
    setRollupTimeInterval(target: any, timeFilter: TimeFilter): void;
    setGranularityTimeInterval(target: any, timeFilter: TimeFilter): void;
    applyTimeShiftOnData(data: any, timeshift: any): void;
    getAllDatapointsOfTimestamp(data: any, index: any): any[];
    convertTimeShiftToMillis(timeShift: string): number;
    parseTimeShift(timeShift: string): number;
    applyTimeShiftOnTimeFilter(timeFilter: TimeFilter, timeShift: number): TimeFilter;
    readTime(options: any): TimeFilter;
    getInfrastructureMetrics(target: any, timeFilter: TimeFilter): any;
    extractMetricsFromText(freeText: string): any[];
    fetchMultipleMetricsForSnapshots(target: any, snapshots: any, timeFilter: any, metrics: any): Promise<any[]>;
    getAnalyzeWebsiteMetrics(target: any, timeFilter: TimeFilter): any;
    getAnalyzeApplicationMetrics(target: any, timeFilter: TimeFilter): any;
    getApplicationServiceEndpointMetrics(target: any, timeFilter: TimeFilter): any;
    getSloInformation(target: any, timeFilter: TimeFilter): any;
    isInvalidQueryInterval(windowSize: number, queryIntervalLimit: number): boolean;
    rejectLargeTimeWindow(maxWindowSize: number): any;
    isApplicationSet(application: any): any;
    isServiceSet(service: any): any;
    isEndpointSet(endpoint: any): any;
    annotationQuery(options: any): void;
    metricFindQuery(query: string): void;
    supportsDeltaRequests(target: any): boolean;
    getVersion(): any;
    isSloEnabled(): boolean;
    testDatasource(): any;
}
